var documenterSearchIndex = {"docs":
[{"location":"generated/man/retrieval/","page":"Retrieving data","title":"Retrieving data","text":"EditURL = \"../../../literate/man/retrieval.jl\"","category":"page"},{"location":"generated/man/retrieval/#Retrieving-data","page":"Retrieving data","title":"Retrieving data","text":"","category":"section"},{"location":"generated/man/retrieval/","page":"Retrieving data","title":"Retrieving data","text":"","category":"page"},{"location":"generated/man/retrieval/","page":"Retrieving data","title":"Retrieving data","text":"This page was generated using Literate.jl.","category":"page"},{"location":"lib/#API","page":"Library","title":"API","text":"","category":"section"},{"location":"lib/#NamedTrajectory-methods","page":"Library","title":"NamedTrajectory methods","text":"","category":"section"},{"location":"lib/","page":"Library","title":"Library","text":"Modules = [\n    NamedTrajectories.MethodsNamedTrajectory\n]","category":"page"},{"location":"lib/#Base.:==-Tuple{NamedTrajectory, NamedTrajectory}","page":"Library","title":"Base.:==","text":":(==)(traj1::NamedTrajectory, traj2::NamedTrajectory)\n\nCheck if trajectories are equal w.r.t. using Base.:(==)\n\n\n\n\n\n","category":"method"},{"location":"lib/#Base.copy-Tuple{NamedTrajectory}","page":"Library","title":"Base.copy","text":"copy(::NamedTrajectory)\n\nReturns a copy of the trajectory.\n\n\n\n\n\n","category":"method"},{"location":"lib/#Base.getindex-Tuple{NamedTrajectory, AbstractVector{Int64}}","page":"Library","title":"Base.getindex","text":"getindex(traj, ts::AbstractVector{Int})::Vector{KnotPoint}\n\nReturns the knot points at times ts.\n\n\n\n\n\n","category":"method"},{"location":"lib/#Base.getindex-Tuple{NamedTrajectory, Int64}","page":"Library","title":"Base.getindex","text":"getindex(traj, t::Int)::KnotPoint\n\nReturns the knot point at time t.\n\n\n\n\n\n","category":"method"},{"location":"lib/#Base.getindex-Tuple{NamedTrajectory, Symbol}","page":"Library","title":"Base.getindex","text":"getindex(traj, symb::Symbol)\n\nDispatches indexing of trajectories as either accessing a component or a property via getproperty.\n\n\n\n\n\n","category":"method"},{"location":"lib/#Base.getproperty-Tuple{NamedTrajectory, Symbol}","page":"Library","title":"Base.getproperty","text":"getproperty(traj, symb::Symbol)\n\nReturns the component of the trajectory with name symb or the property of the trajectory with name symb.\n\n\n\n\n\n","category":"method"},{"location":"lib/#Base.isequal-Tuple{NamedTrajectory, NamedTrajectory}","page":"Library","title":"Base.isequal","text":"isequal(traj1::NamedTrajectory, traj2::NamedTrajectory)\n\nCheck if trajectories are equal w.r.t. data using Base.isequal\n\n\n\n\n\n","category":"method"},{"location":"lib/#Base.lastindex-Tuple{NamedTrajectory}","page":"Library","title":"Base.lastindex","text":"lastindex(traj::NamedTrajectory)\n\nReturns the final time index of the trajectory.\n\n\n\n\n\n","category":"method"},{"location":"lib/#Base.length-Tuple{NamedTrajectory}","page":"Library","title":"Base.length","text":"length(::NamedTrajectory)\n\nReturns the length of all variables of the trajectory, including global data.\n\n\n\n\n\n","category":"method"},{"location":"lib/#Base.merge-Tuple{NamedTrajectory, NamedTrajectory}","page":"Library","title":"Base.merge","text":"merge(traj1::NamedTrajectory, traj2::NamedTrajectory)\nmerge(trajs::AbstractVector{<:NamedTrajectory})\n\nReturns a new NamedTrajectory object by merging NamedTrajectory objects. \n\nMerge names are used to specify which components to merge by index. If no merge names are provided, all components are merged and name collisions are not allowed. If merge names are provided, the names are merged using the data from the index provided in the merge names.\n\nJoined NamedTrajectory objects must have the same timestep. If a free time trajectory is desired, setting the keyword argument free_time=true will construct the a component for the timestep. In this case, the timestep symbol must be provided. \n\nArguments\n\ntraj1::NamedTrajectory: The first NamedTrajectory object.\ntraj2::NamedTrajectory: The second NamedTrajectory object.\nfree_time::Bool=false: Whether to construct a free time problem.\ntimestep_name::Symbol=:Δt: The timestep symbol to use for free time problems.\nmerge_names::Union{Nothing, NamedTuple{<:Any, <:Tuple{Vararg{Int}}}}=nothing: The names to merge by index.\n\n\n\n\n\n","category":"method"},{"location":"lib/#Base.setproperty!-Tuple{NamedTrajectory, Symbol, Any}","page":"Library","title":"Base.setproperty!","text":"setproperty!(traj, name::Symbol, val::Any)\n\nDispatches setting properties of trajectories as either setting a component or a property via setfield! or update!.\n\n\n\n\n\n","category":"method"},{"location":"lib/#Base.size-Tuple{NamedTrajectory}","page":"Library","title":"Base.size","text":"size(traj::NamedTrajectory) = (dim = traj.dim, T = traj.T)\n\nReturns the size of the trajectory (dim, T), excluding global data.\n\nTODO: Should global data be in size?\n\n\n\n\n\n","category":"method"},{"location":"lib/#Base.vec-Tuple{NamedTrajectory}","page":"Library","title":"Base.vec","text":"vec(::NamedTrajectory)\n\nReturns all variables of the trajectory as a vector, Z⃗.\n\n\n\n\n\n","category":"method"},{"location":"lib/#NamedTrajectories.MethodsNamedTrajectory.add_component!-Tuple{NamedTrajectory, Symbol, AbstractVecOrMat{Float64}}","page":"Library","title":"NamedTrajectories.MethodsNamedTrajectory.add_component!","text":"add_component!(traj, name::Symbol, data::AbstractVecOrMat; type={:state, :control})\n\nAdd a component to the trajectory.\n\nThis function resizes the trajectory, so global components and components must be adjusted.\n\n\n\n\n\n","category":"method"},{"location":"lib/#NamedTrajectories.MethodsNamedTrajectory.get_component_names-Tuple{NamedTrajectory, AbstractVector{<:Int64}}","page":"Library","title":"NamedTrajectories.MethodsNamedTrajectory.get_component_names","text":"get_component_names(traj::NamedTrajectory, comps::AbstractVector{<:Int})\n\nReturns the name of the component with the given indices. If only one component is found, the name is returned as a single symbol. Else, the names are returned as a vector of symbols.\n\nThe filter requires that the components are a complete subset of the given indices, so that a partial match is excluded from the returned names.\n\n\n\n\n\n","category":"method"},{"location":"lib/#NamedTrajectories.MethodsNamedTrajectory.get_components-Tuple{Union{Tuple, AbstractVector}, NamedTrajectory}","page":"Library","title":"NamedTrajectories.MethodsNamedTrajectory.get_components","text":"get_components(::NamedTrajectory)\n\nReturns a NamedTuple containing the names and corresponding data matrices of the trajectory.\n\n\n\n\n\n","category":"method"},{"location":"lib/#NamedTrajectories.MethodsNamedTrajectory.get_duration-Tuple{NamedTrajectory}","page":"Library","title":"NamedTrajectories.MethodsNamedTrajectory.get_duration","text":"get_duration(::NamedTrajectory)\n\nReturns the duration of a trajectory.\n\n\n\n\n\n","category":"method"},{"location":"lib/#NamedTrajectories.MethodsNamedTrajectory.get_times-Tuple{NamedTrajectory}","page":"Library","title":"NamedTrajectories.MethodsNamedTrajectory.get_times","text":"get_times(traj)::Vector{Float64}\n\nReturns the times of a trajectory as a vector.\n\n\n\n\n\n","category":"method"},{"location":"lib/#NamedTrajectories.MethodsNamedTrajectory.get_timesteps-Tuple{NamedTrajectory}","page":"Library","title":"NamedTrajectories.MethodsNamedTrajectory.get_timesteps","text":"get_timesteps(::NamedTrajectory)\n\nReturns the timesteps of a trajectory as a vector.\n\n\n\n\n\n","category":"method"},{"location":"lib/#NamedTrajectories.MethodsNamedTrajectory.merge_outer-Tuple{AbstractVector}","page":"Library","title":"NamedTrajectories.MethodsNamedTrajectory.merge_outer","text":"merge_outer(objs::AbstractVector{<:Any})\n\nMerge objects. An error is reported if a key collision is detected.\n\n\n\n\n\n","category":"method"},{"location":"lib/#NamedTrajectories.MethodsNamedTrajectory.remove_component-Tuple{NamedTrajectory, Symbol}","page":"Library","title":"NamedTrajectories.MethodsNamedTrajectory.remove_component","text":"remove_component(traj, name::Symbol)\n\nRemove a component from the trajectory.\n\n\n\n\n\n","category":"method"},{"location":"lib/#NamedTrajectories.MethodsNamedTrajectory.remove_components-Tuple{NamedTrajectory, AbstractVector{<:Symbol}}","page":"Library","title":"NamedTrajectories.MethodsNamedTrajectory.remove_components","text":"remove_components(traj, names::Vector{Symbol})\n\nRemove a set of components from the trajectory.\n\n\n\n\n\n","category":"method"},{"location":"lib/#NamedTrajectories.MethodsNamedTrajectory.update!-Tuple{NamedTrajectory, AbstractVector{Float64}}","page":"Library","title":"NamedTrajectories.MethodsNamedTrajectory.update!","text":"update!(traj, datavec::AbstractVector{Float64})\n\nUpdate the trajectory with a new datavec.\n\n\n\n\n\n","category":"method"},{"location":"lib/#NamedTrajectories.MethodsNamedTrajectory.update!-Tuple{NamedTrajectory, Symbol, AbstractMatrix{Float64}}","page":"Library","title":"NamedTrajectories.MethodsNamedTrajectory.update!","text":"update!(traj, name::Symbol, data::AbstractMatrix{Float64})\n\nUpdate a component of the trajectory.\n\n\n\n\n\n","category":"method"},{"location":"lib/#NamedTrajectories.MethodsNamedTrajectory.update_bound!","page":"Library","title":"NamedTrajectories.MethodsNamedTrajectory.update_bound!","text":"update_bound!(traj, name::Symbol, data::Real)\nupdate_bound!(traj, name::Symbol, data::AbstractVector{<:Real})\nupdate_bound!(traj, name::Symbol, data::Tuple{R, R} where R <: Real)\n\nUpdate the bound of a component of the trajectory.\n\n\n\n\n\n","category":"function"},{"location":"lib/#random-trajectory-methods","page":"Library","title":"random trajectory methods","text":"","category":"section"},{"location":"lib/","page":"Library","title":"Library","text":"Modules = [\n    NamedTrajectories.RandomTrajectories\n]","category":"page"},{"location":"lib/#Base.rand-Tuple{Type{NamedTrajectory}, Int64}","page":"Library","title":"Base.rand","text":"rand(\n    ::Type{NamedTrajectory},\n    T::Int;\n    timestep_value::Float64=1.0,\n    timestep_name::Symbol=:Δt,\n    free_time::Bool=false,\n    timestep::Union{Float64,Symbol}=free_time ? timestep_name : timestep_value,\n    state_dim::Int=3,\n    control_dim::Int=2\n)\n\nCreate a random NamedTrajectory with T time steps, a state variable x of dimension state_dim, and a control variable u of dimension control_dim. If free_time is true, the time step is a symbol timestep_name and the time step value is timestep_value. Otherwise, the time step is a number timestep_value.\n\n\n\n\n\n","category":"method"},{"location":"man/operations/","page":"Operations with other trajectories","title":"Operations with other trajectories","text":"EditURL = \"../../literate/man/operations.jl\"","category":"page"},{"location":"man/operations/#Operations-with-other-trajectories","page":"Operations with other trajectories","title":"Operations with other trajectories","text":"","category":"section"},{"location":"man/operations/","page":"Operations with other trajectories","title":"Operations with other trajectories","text":"","category":"page"},{"location":"man/operations/","page":"Operations with other trajectories","title":"Operations with other trajectories","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/man/updating/","page":"Updating data","title":"Updating data","text":"EditURL = \"../../../literate/man/updating.jl\"","category":"page"},{"location":"generated/man/updating/#Updating-data","page":"Updating data","title":"Updating data","text":"","category":"section"},{"location":"generated/man/updating/","page":"Updating data","title":"Updating data","text":"","category":"page"},{"location":"generated/man/updating/","page":"Updating data","title":"Updating data","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/add_remove/","page":"Adding and removing variables","title":"Adding and removing variables","text":"EditURL = \"../../literate/man/add_remove.jl\"","category":"page"},{"location":"man/add_remove/#Adding-and-removing-variables","page":"Adding and removing variables","title":"Adding and removing variables","text":"","category":"section"},{"location":"man/add_remove/","page":"Adding and removing variables","title":"Adding and removing variables","text":"","category":"page"},{"location":"man/add_remove/","page":"Adding and removing variables","title":"Adding and removing variables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/retrieval/","page":"Retrieving data","title":"Retrieving data","text":"EditURL = \"../../literate/man/retrieval.jl\"","category":"page"},{"location":"man/retrieval/#Retrieving-data","page":"Retrieving data","title":"Retrieving data","text":"","category":"section"},{"location":"man/retrieval/","page":"Retrieving data","title":"Retrieving data","text":"","category":"page"},{"location":"man/retrieval/","page":"Retrieving data","title":"Retrieving data","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/man/add_remove/","page":"Adding and removing variables","title":"Adding and removing variables","text":"EditURL = \"../../../literate/man/add_remove.jl\"","category":"page"},{"location":"generated/man/add_remove/#Adding-and-removing-variables","page":"Adding and removing variables","title":"Adding and removing variables","text":"","category":"section"},{"location":"generated/man/add_remove/","page":"Adding and removing variables","title":"Adding and removing variables","text":"","category":"page"},{"location":"generated/man/add_remove/","page":"Adding and removing variables","title":"Adding and removing variables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/times/","page":"Times and timesteps","title":"Times and timesteps","text":"EditURL = \"../../literate/man/times.jl\"","category":"page"},{"location":"man/times/#Times-and-timesteps","page":"Times and timesteps","title":"Times and timesteps","text":"","category":"section"},{"location":"man/times/","page":"Times and timesteps","title":"Times and timesteps","text":"","category":"page"},{"location":"man/times/","page":"Times and timesteps","title":"Times and timesteps","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/updating/","page":"Updating data","title":"Updating data","text":"EditURL = \"../../literate/man/updating.jl\"","category":"page"},{"location":"man/updating/#Updating-data","page":"Updating data","title":"Updating data","text":"","category":"section"},{"location":"man/updating/","page":"Updating data","title":"Updating data","text":"","category":"page"},{"location":"man/updating/","page":"Updating data","title":"Updating data","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"EditURL = \"../literate/manual.jl\"","category":"page"},{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#Constructors","page":"Manual","title":"Constructors","text":"","category":"section"},{"location":"manual/#Retrieving-data","page":"Manual","title":"Retrieving data","text":"","category":"section"},{"location":"manual/#Adding-and-removing-variables","page":"Manual","title":"Adding and removing variables","text":"","category":"section"},{"location":"manual/#Updating-data-and-bounds","page":"Manual","title":"Updating data and bounds","text":"","category":"section"},{"location":"manual/#Getting-times-and-timesteps","page":"Manual","title":"Getting times and timesteps","text":"","category":"section"},{"location":"manual/#Operations-with-other-trajectories","page":"Manual","title":"Operations with other trajectories","text":"","category":"section"},{"location":"manual/#Copying-and-equality","page":"Manual","title":"Copying and equality","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"EditURL = \"../../literate/plotting.jl\"","category":"page"},{"location":"generated/plotting/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"Visualizing trajectories is crucial for understanding the solutions of trajectory optmization problems and NamedTrajectories exports a plot function that contains a lot of functionality that is continually being added to. Makie.jl is used as the plotting framework, and at the moment the default backend is CairoMakie, as it creates high quality vector graphics. The function is called as follows:","category":"page"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"NamedTrajectories.plot(\n    ::NamedTrajectory,\n    ::Union{Symbol, Vector{Symbol}, Tuple{Vararg{Symbol}}} = traj.names;\n    kwargs...\n)","category":"page"},{"location":"generated/plotting/#MakieCore.plot","page":"Plotting","title":"MakieCore.plot","text":"plot(traj::NamedTrajectory, comps=traj.names; kwargs...)\n\nPlot a NamedTrajectory using CairoMakie.\n\nArguments\n\ntraj::NamedTrajectory: the trajectory to plot\ncomps::Union{Symbol, Vector{Symbol}, Tuple{Vararg{Symbol}}}: the components of the trajectory to plot, e.g., :x, [:x, :u], or (:x, :u).\n\nKeyword Arguments\n\ncomponent specification\n\nignored_labels::Union{Symbol, Vector{Symbol}, Tuple{Vararg{Symbol}}}: the components of the trajectory to ignore. The default is ().\nignore_timestep::Bool: whether or not to ignore the timestep component of the trajectory. The default is true.\n\ntransformations\n\ntransformations::OrderedDict{Symbol, <:Union{Function, Vector}}: a dictionary of transformations to apply to the components of the trajectory. The keys of the dictionary are the components of the trajectory to transform, and the values are either a single function or a vector of functions to apply to each column of the component. If a single function is provided, it is applied to each column of the component. If a vector of functions is provided, a separate plot is created for each function. The default is an empty OrderedDict.\ntransformation_labels::Union{Nothing, OrderedDict{Symbol, <:Union{Nothing, <:AbstractString, Vector{<:Union{Nothing, <:AbstractString}}}}}: a dictionary of labels for the transformed components of the trajectory. The keys of the dictionary are the components of the trajectory to transform, and the values are either a single string or a vector of strings that correspond to a vector of transformations. If a single string is provided, it is applied to each transformation of the component. If a vector of strings is provided, a separate label is created for each function. The default is nothing.\ninclude_transformation_labels::Union{Bool, Vector{<:Union{Bool, Vector{Bool}}}}: a boolean, vector of booleans, or vector of vectors of booleans, that determines whether or not to include the labels for the transformed components of the trajectory. The default is false.\ntransformation_titles::Union{Nothing, OrderedDict{Symbol, <:Union{<:AbstractString, Vector{String}}}}: a dictionary of titles for the transformed components of the trajectory. The keys of the dictionary are the components of the trajectory to transform, and the values are either a single string or a vector of strings that correspond to a vector of transformations. If a single string is provided, it is applied to each transformation of the component. If a vector of strings is provided, a separate title is created for each function. The default is nothing.\n\nstyle\n\nfig_size::Tuple{Int, Int}: the size of the figure, (width, height). The default is (1200, 800).\ntitlesize::Int: the size of the titles. The default is 25.\nseries_color::Symbol: the color of the series. The default is :glasbey_bw_minc_20_n256. See options here\nmarkersize: the size of the markers. The default is 5.\n\nother\n\nkwargs...: keyword arguments passed to CairoMakie.series!.\n\n\n\n\n\n","category":"function"},{"location":"generated/plotting/#Basic-example","page":"Plotting","title":"Basic example","text":"","category":"section"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"Let's first create a simple trajectory to plot","category":"page"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"using NamedTrajectories\n\n# define the number timestamps\nT = 100\nΔt = 0.1\nts = [0:T-1...] * Δt\n\n# define sinusoidal state trajectories\nX = zeros(3, T)\nX[1, :] = sin.(3 * 2π * ts / (2 * (T - 1) * Δt))\nX[2, :] = -sin.(5 * 2π * ts / (2 * (T - 1) * Δt))\nX[3, :] = sin.(9 * 2π * ts / (2 * (T - 1) * Δt))\n\n# define gaussian shaped controls\nU = stack(\n    [\n        exp.(-((ts .- ts[length(ts)÷3]) / 2.0).^2) .* sin.(5.0 * ts),\n        exp.(-((ts .- ts[2(length(ts)÷3)]) / 1.5).^2) .* sin.(4.0 * ts)\n    ];\n    dims=1\n)\nV = exp.(-((ts .- ts[length(ts)÷2]) ./ 1.5).^2) .* sin.(6.0 * ts)\n\n# create the trajectory\ntraj = NamedTrajectory(\n    (\n        x=X,\n        u=U,\n        v=V\n    );\n    timestep=Δt,\n    controls=(:u, :v)\n)\n\n# plot the trajectory\nplot(traj)","category":"page"},{"location":"generated/plotting/#Selectively-plotting-components","page":"Plotting","title":"Selectively plotting components","text":"","category":"section"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"We can selectively plot components of the trajectory by passing a Vector of Symbols to the components keyword argument. For example, if we only wanted to plot the state and the first control we could do the following:","category":"page"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"plot(traj, [:x, :u])","category":"page"},{"location":"generated/plotting/#Playing-with-transformations","page":"Plotting","title":"Playing with transformations","text":"","category":"section"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"We can also apply transformations to the components of the trajectory. Transformations are performed on columns of the data.","category":"page"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"For example, if we wanted to plot absolute values of the states we could do the following:","category":"page"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"transformations = OrderedDict(\n    :x => x -> abs.(x),\n)\n\nplot(traj, [:x]; transformations=transformations)","category":"page"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"We can also pass multiple transformations to the same component, with selective labels and titles:","category":"page"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"# define the transformations\ntransformations = OrderedDict(\n    :x => [\n        x -> [x[1] + x[2], x[3] - x[2]],\n        x -> [x[1] - x[2], x[3] + x[2]]\n    ],\n)\n\n# define the labels\ntransformation_labels = OrderedDict(\n    :x => [\n        \"\\\\tilde{x}\",\n        \"\\\\hat{x}\"\n    ],\n)\n\n# define the titles\ntransformation_titles = OrderedDict(\n    :x => [\n        L\"x_1 + x_2, x_3 - x_2\",\n        L\"x_1 - x_2, x_3 + x_2\"\n    ],\n)\n\n# plot the trajectory, with only the transformation and the `u` control\nplot(traj, [:u];\n    transformations=transformations,\n    transformation_labels=transformation_labels,\n    include_transformation_labels=[[true, true]],\n    transformation_titles=transformation_titles,\n)","category":"page"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"","category":"page"},{"location":"generated/plotting/","page":"Plotting","title":"Plotting","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/constructors/","page":"Constructors","title":"Constructors","text":"EditURL = \"../../literate/man/constructors.jl\"","category":"page"},{"location":"man/constructors/#Constructors","page":"Constructors","title":"Constructors","text":"","category":"section"},{"location":"man/constructors/","page":"Constructors","title":"Constructors","text":"","category":"page"},{"location":"man/constructors/","page":"Constructors","title":"Constructors","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/man/copy_equality/","page":"Copying and equality","title":"Copying and equality","text":"EditURL = \"../../../literate/man/copy_equality.jl\"","category":"page"},{"location":"generated/man/copy_equality/#Copying-and-equality","page":"Copying and equality","title":"Copying and equality","text":"","category":"section"},{"location":"generated/man/copy_equality/","page":"Copying and equality","title":"Copying and equality","text":"","category":"page"},{"location":"generated/man/copy_equality/","page":"Copying and equality","title":"Copying and equality","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/manual/","page":"Manual","title":"Manual","text":"EditURL = \"../../literate/manual.jl\"","category":"page"},{"location":"generated/manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"generated/manual/#Constructors","page":"Manual","title":"Constructors","text":"","category":"section"},{"location":"generated/manual/#Retrieving-data","page":"Manual","title":"Retrieving data","text":"","category":"section"},{"location":"generated/manual/#Adding-and-removing-variables","page":"Manual","title":"Adding and removing variables","text":"","category":"section"},{"location":"generated/manual/#Updating-data-and-bounds","page":"Manual","title":"Updating data and bounds","text":"","category":"section"},{"location":"generated/manual/#Getting-times-and-timesteps","page":"Manual","title":"Getting times and timesteps","text":"","category":"section"},{"location":"generated/manual/#Operations-with-other-trajectories","page":"Manual","title":"Operations with other trajectories","text":"","category":"section"},{"location":"generated/manual/#Copying-and-equality","page":"Manual","title":"Copying and equality","text":"","category":"section"},{"location":"generated/manual/","page":"Manual","title":"Manual","text":"","category":"page"},{"location":"generated/manual/","page":"Manual","title":"Manual","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/man/times/","page":"Times and timesteps","title":"Times and timesteps","text":"EditURL = \"../../../literate/man/times.jl\"","category":"page"},{"location":"generated/man/times/#Times-and-timesteps","page":"Times and timesteps","title":"Times and timesteps","text":"","category":"section"},{"location":"generated/man/times/","page":"Times and timesteps","title":"Times and timesteps","text":"","category":"page"},{"location":"generated/man/times/","page":"Times and timesteps","title":"Times and timesteps","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/man/operations/","page":"Operations with other trajectories","title":"Operations with other trajectories","text":"EditURL = \"../../../literate/man/operations.jl\"","category":"page"},{"location":"generated/man/operations/#Operations-with-other-trajectories","page":"Operations with other trajectories","title":"Operations with other trajectories","text":"","category":"section"},{"location":"generated/man/operations/","page":"Operations with other trajectories","title":"Operations with other trajectories","text":"","category":"page"},{"location":"generated/man/operations/","page":"Operations with other trajectories","title":"Operations with other trajectories","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"EditURL = \"../../literate/quickstart.jl\"","category":"page"},{"location":"generated/quickstart/#Quickstart-Guide","page":"Quickstart Guide","title":"Quickstart Guide","text":"","category":"section"},{"location":"generated/quickstart/#Getting-set-up","page":"Quickstart Guide","title":"Getting set up","text":"","category":"section"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"To install NamedTrajectories simply enter the package manager in the Julia REPL with ] and run","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"pkg> add NamedTrajectories","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"Then just use the package as usual with","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"using NamedTrajectories","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"For the following examples let's work with a simple trajectory","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"qtyz_t = mqty(x_t  u_t)_t=1T","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"where x_t is the state and u_t is the control at a time indexed by t. Together z_t is referred to as a knot point and a NamedTrajectory essentially just stores a collection of knot points and makes it easy to access the state and control variables.","category":"page"},{"location":"generated/quickstart/#Creating-a-fixed-timestep-NamedTrajectory","page":"Quickstart Guide","title":"Creating a fixed-timestep NamedTrajectory","text":"","category":"section"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"Here we will createa a NamedTrajectory with a fixed timestep. This is done by passing a scalar as the timestep kwarg.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"# define the number of timesteps\nT = 10\n\n# define the knot point data as a NamedTuple of matrices\ndata = (\n    x = rand(3, T),\n    u = rand(2, T),\n)\n\n# we must specify a timestep and control variable for the trajectory\ntimestep = 0.1\ncontrol = :u\n\n# we can now create a `NamedTrajectory` object\ntraj = NamedTrajectory(data; timestep=timestep, controls=control)\n\n# we can return the names of the stored variables\ntraj.names","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"Let's plot this trajectory","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"plot(traj)","category":"page"},{"location":"generated/quickstart/#Creating-a-variable-timestep-NamedTrajectory","page":"Quickstart Guide","title":"Creating a variable-timestep NamedTrajectory","text":"","category":"section"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"Here we will create a NamedTrajectory with a variable timestep. This is done by passing a Symbol, corresponding to component of the data, as the timestep kwarg.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"# define the number of timesteps\nT = 10\n\n# define the knot point data as a NamedTuple of matrices\ndata = (\n    x = rand(3, T),\n    u = rand(2, T),\n    Δt = rand(T),\n)\n\n# we must specify a timestep and control variable for the NamedTrajectory\ntimestep = :Δt\ncontrol = :u\n\n# we can now create a `NamedTrajectory` object\ntraj = NamedTrajectory(data; timestep=timestep, controls=control)\n\n# we can return the names of the stored variables\ntraj.names","category":"page"},{"location":"generated/quickstart/#Adding-more-problem-data","page":"Quickstart Guide","title":"Adding more problem data","text":"","category":"section"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"In many settings we will want to add problem data to our NamedTrajectory – e.g. bounds, initial values, final values, and goal values. This is realized by passing NamedTuples containing this data.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"# define the number of timesteps\nT = 10\n\n# define the knot point data as a NamedTuple of matrices\ndata = (\n    x = rand(3, T),\n    u = rand(2, T),\n    Δt = rand(T),\n)\n\n# define initial values\ninitial = (\n    x = [1.0, 0.0, 0.0],\n    u = [0.0, 0.0],\n)\n\n# define final value, here just on the control\nfinal = (\n    u = [0.0, 0.0],\n)\n\n# define bounds\nbounds = (\n    x = 1.0,\n    u = 1.0\n)\n\n# set a goal for the state\ngoal = (\n    x = [0.0, 0.0, 1.0],\n)\n\n# we must specify a timestep and control variable for the NamedTrajectory\ntimestep = :Δt\ncontrol = :u\n\n# we can now create a `NamedTrajectory` object\ntraj = NamedTrajectory(\n    data;\n    timestep=timestep,\n    controls=control,\n    initial=initial,\n    final=final,\n    bounds=bounds,\n    goal=goal\n)\n\n# we can then show the bounds\ntraj.goal","category":"page"},{"location":"generated/quickstart/#Retrieving-data","page":"Quickstart Guide","title":"Retrieving data","text":"","category":"section"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"There are a number of ways to access data, for example","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"traj.x","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"returns the data matrix associated with the state variable x.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"traj.data","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"returns the all of the data as a matrix where each column is a knot point.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"traj.datavec","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"returns the all of the data as a view of the data matrix as a vector – useful for passing data to solvers.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"traj[1]","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"returns a KnotPoint.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"traj[1].x","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"returns the state at the first knot point.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"get_times(traj)","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"returns the times of the knot points.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"get_timesteps(traj)","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"returns the timesteps of the knot points, as vector.","category":"page"},{"location":"generated/quickstart/#Retrieving-metadata","page":"Quickstart Guide","title":"Retrieving metadata","text":"","category":"section"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"We can also retrieve metadata about the trajectory, for example","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"traj.names","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"returns the names of the variables stored in the trajectory.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"traj.dims","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"returns the dimensions of the variables stored in the trajectory.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"traj.T","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"returns the number of knot points in the trajectory.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"traj.components","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"returns the components of the trajectory.","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"","category":"page"},{"location":"generated/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#NamedTrajectories.jl","page":"Home","title":"NamedTrajectories.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An elegant way to handle messy trajectory data","category":"page"},{"location":"","page":"Home","title":"Home","text":"info: Notice\nThis package is under active development and issues may arise – please be patient and report any issues you find!  ","category":"page"},{"location":"#Motivation","page":"Home","title":"Motivation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NamedTrajectories.jl is designed to aid in the messy indexing involved in solving trajectory optimization problems of the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginalign*\nundersetu^1_1T dots u^n_c_1Tundersetx^1_1T cdots x^n_s_1Toperatornameminimize quad Jqty(x^1n_s_1Tu^1n_c_1T) \ntextsubject to  quad fqty(x^1n_s_1Tu^1n_c_1T) = 0 \n quad x^i_1 = x^i_textinitial \n quad x^i_T = x^i_textfinal \n quad u^i_1 = u^i_textinitial \n quad u^i_T = u^i_textfinal \n quad x^i_min  x^i_t  x^i_max \n quad u^i_min  u^i_t  u^i_max \nendalign*","category":"page"},{"location":"","page":"Home","title":"Home","text":"Where x^i_t is the ith state variable and u^i_t is the ith control variable at timestep t; state and control variables can be of arbitrary dimension. The function f is a nonlinear constraint function and J is the objective function. These problems can have an arbitrary number of state (n_s) and control (n_c) variables, and the number of timesteps T can vary as well.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"In trajectory optimization problems it is common practice to bundle all of the state and control variables together into a single knot point","category":"page"},{"location":"","page":"Home","title":"Home","text":"z_t = mqty(\n    x^1_t \n    vdots \n    x^n_s_t \n    u^1_t \n    vdots \n    u^n_c_t\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The trajectory optimization problem can then be succinctly written as","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginalign*\nundersetz_1Toperatornameminimize quad Jqty(z_1T) \ntextsubject to  quad fqty(z_1T) = 0 \n quad z_1 = z_textinitial \n quad z_T = z_textfinal \n quad z_min  z_t  z_max \nendalign*","category":"page"},{"location":"","page":"Home","title":"Home","text":"The NamedTrajectories package provides a NamedTrajectory type which abstracts away the messy indexing and vectorization details required for interfacing with numerical solvers.  It also provides a variety of helpful methods for common tasks.  For example, you can access the data by name or index.  In the case of an index, a KnotPoint is returned which contains the data for that timestep.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Abstract away messy indexing and vectorization details required for interfacing with numerical solvers.\nEasily handle multiple trajectories with different names, e.g. various states and controls.\nSimple plotting of trajectories.\nProvide a variety of helpful methods for common tasks.","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [\n    NamedTrajectories.MethodsNamedTrajectory, \n    NamedTrajectories.MethodsKnotPoint,\n    Base\n]","category":"page"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"EditURL = \"../../../literate/man/constructors.jl\"","category":"page"},{"location":"generated/man/constructors/#Constructors","page":"Constructors","title":"Constructors","text":"","category":"section"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"To construct a NamedTrajectory using NamedTrajectories.jl, we simply need to utilize the NamedTrajectory constructor.","category":"page"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"using NamedTrajectories\n\n# define number of timesteps and timestep\nT = 10\ndt = 0.1","category":"page"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"build named tuple of components and data matrices.","category":"page"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"components = (\n    x = rand(3, T),\n    u = rand(2, T),\n    Δt = fill(dt, 1, T),\n)","category":"page"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"we must specify a timestep and control variable for the trajectory.","category":"page"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"timestep = 0.1\ncontrol = :u","category":"page"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"we can now create a NamedTrajectory object.","category":"page"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"traj = NamedTrajectory(components; timestep=timestep, controls=control)","category":"page"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"Construct NamedTrajectory from previous constructed one.","category":"page"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"traj = NamedTrajectory(components, traj)","category":"page"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"","category":"page"},{"location":"generated/man/constructors/","page":"Constructors","title":"Constructors","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"EditURL = \"../../../literate/man/params_in_struct.jl\"","category":"page"},{"location":"generated/man/params_in_struct/#Add-params-in-NamedTrajectory","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"","category":"section"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"NamedTrajectory.jl support passing parameters as a Tuple when construct a NamedTrajectory.","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"using NamedTrajectories","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"First we need to define number of timesteps and timestep","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"T = 10\ndt = 0.1","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"then build named tuple of components and data matrices.","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"components = (\n    x = rand(3, T),\n    u = rand(2, T),\n    Δt = fill(dt, 1, T),\n)","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"we must specify a timestep and control variable for the trajectory.","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"timestep = 0.1\ncontrol = :u","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"some global params as a NamedTuple","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"params = (\n    α = rand(1),\n    β = rand(1)\n)","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"we can now create a NamedTrajectory object with parameters specification.","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"traj = NamedTrajectory(components; timestep=timestep, controls=control, global_data=params)","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"","category":"page"},{"location":"generated/man/params_in_struct/","page":"Add params in NamedTrajectory","title":"Add params in NamedTrajectory","text":"This page was generated using Literate.jl.","category":"page"}]
}
